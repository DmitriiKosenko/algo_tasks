/*

Реализация большого проекта — очень сложная задача, и при разработке программист Алексей руководствуется следующим принципом: сначала написать работающий прототип, а потом улучшать код. Чтобы не забыть, что именно отложено на потом, на каждый такой долг Алексей заводит на себя задачу в специальной системе Yagile.
Система устроена следующим образом: для каждой задачи задается дедлайн — день ti. Если задача не решена до этого момента времени, то в задачу приходит робот и пишет комментарий о том, что задачу надобно закрыть. Если через X дней задача не решена, то робот приходит снова. Так продолжается до тех пор, пока задача не будет решена.
Алексей каждый день заходит в Yagile и видит сообщения от робота. Если Алексей не хочет приступать к решению накопленных задач, то он прочитывает все сообщения с помощью одной кнопки и занимается другими делами. Однако Алексей понимает, что так долго делать нельзя, поэтому он разрешает себе нажимать на эту кнопку ровно K−1 раз, а на K-й раз садится и решает все задачи разом (даже те, у которых не настал дедлайн).
Определите день, когда Алексей закроет все задачи.

Формат ввода
Первая строка содержит три целых числа N (1≤N≤105) — количество накопленных задач, X (1≤X≤109) — количество дней, через которое приходит робот и число K из условия (1≤K≤109).

Вторая строка содержит N целых чисел t1, t2, …, tN (1≤ti≤109) — дедлайны соответствующих задач.
Формат вывода
Выведите одно число — день, когда Алексей закроет все задачи. 

*/

#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <cstdint>
#include <string>
#include <sstream>

using namespace std;

int main() {

	int n;
	long x, k;
	vector<long> t0;

	cin >> n >> x >> k;

	t0.reserve(n);
	for (int i = 0; i < n; ++i) {
		long temp;
		cin >> temp;
		t0.push_back(temp);
	}

	sort(t0.begin(), t0.end());
	if (k == 1) {
		cout << t0[0];
		return 0;
	}

	vector<long> t1;
	t1.reserve(n);
	long prev = t0[0];
	t1.push_back(prev);
	for (int i = 1; i < t1.size(); i++) {
		if (t0[i] != prev) {
			t1.push_back(t0[i]);
			prev = t0[i];
		}
	}

	long counter = 1; // k - 1
	int i = 0;
	auto it = t1.begin();
	while (counter != k) {
		long val = t1[i] + x;

		if (val < t1[i + 1]) {
			t1[i] = val;
		} else {

			i++;
			it++;
			auto it2 = it;
			bool flag = false;
			while (! flag && it2 != t1.end()) {
				if (*it2 == val) {
					flag = true;
				} else {
					if (*it2 > val) {
						t1.insert(it2, val);
						flag = true;
					}
				}
				it2++;
			}
			if (!flag && it2 == t1.end()) {
				t1.push_back(val);
			}

		}
		counter++;
	}

	cout << t1[i];
	return 0;
}